{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.js","redux/phonebook/phonebook-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/phonebook/phonebook-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actions","addContact","createAction","contact","payload","id","nanoid","name","number","delContact","filterContacts","ContactForm","useState","setName","setNumber","dispatch","useDispatch","inputChange","event","target","value","onSubmit","preventDefault","className","s","form","type","pattern","title","required","onChange","input","button","getContacts","state","items","filter","toLowerCase","includes","getFilter","Filter","useSelector","ContactList","contacts","list","map","item","onClick","App","itemsReducer","createReducer","action","some","alert","filterReducer","phonebookPersistConfig","key","storage","blacklist","rootReducer","combineReducers","persReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.aeebef2b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__9LzTV\",\"item\":\"ContactList_item__cnRnt\",\"button\":\"ContactList_button__1iYB_\"};","import { createAction } from '@reduxjs/toolkit'\r\nimport { nanoid } from 'nanoid'\r\n\r\nconst addContact = createAction('phonebook/addContact', (contact) => {\r\n    return {\r\n        payload:{\r\n            id: nanoid(),\r\n            name: contact.name,\r\n            number: contact.number\r\n        }\r\n    }\r\n})\r\nconst delContact = createAction('phonebook/delContact')\r\nconst filterContacts = createAction('phonebook/filterContacts')\r\n\r\n\r\nconst actions = {addContact, delContact, filterContacts}\r\nexport default actions","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nimport s from './ContactForm.module.css'\r\n\r\n\r\nexport default function ContactForm(){\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const inputChange = (event) => {\r\n      switch(event.target.name){\r\n        case 'name':\r\n          setName(event.target.value)\r\n          break\r\n        case 'number':\r\n          setNumber(event.target.value)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    }\r\n\r\n    \r\n     const formSubmit = (event) => {\r\n        event.preventDefault()\r\n        dispatch(actions.addContact({\r\n          name,\r\n          number,\r\n        }))\r\n        setName('')\r\n        setNumber('')\r\n      }\r\n\r\n        return (\r\n        <form onSubmit = {formSubmit} className ={s.form}>\r\n          <label>\r\n            <h3>Name</h3>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n              onChange = {inputChange}\r\n              value = {name}\r\n              className = {s.input}\r\n            />\r\n            <h3>Number</h3>\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n              onChange = {inputChange}\r\n              value = {number}\r\n              className = {s.input}\r\n            />\r\n          </label>\r\n          <button type = \"submit\" className = {s.button}>Add contact</button>\r\n        </form> \r\n        )\r\n}\r\n","export const getContacts = state => {\r\n    return state.items.filter(contact => contact.name.toLowerCase().includes(state.filter.toLowerCase()))\r\n}\r\n\r\nexport const getFilter = state => state.filter","import PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nimport {getFilter} from '../../redux/phonebook/phonebook-selectors'\r\n\r\nexport default function Filter(){\r\n    const value = useSelector(getFilter)\r\n    const dispatch = useDispatch()\r\n\r\n    return(\r\n        <>\r\n        <p>Find contacts by name</p>\r\n          <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                onChange = {(event) => dispatch(actions.filterContacts(event.target.value))}\r\n                value = {value}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.string\r\n}","import { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport s from './ContactList.module.css'\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nimport {getContacts} from '../../redux/phonebook/phonebook-selectors'\r\n\r\nexport default function ContactList(){\r\n    const contacts = useSelector(getContacts)\r\n    const dispatch = useDispatch()\r\n \r\n    return(\r\n        <ul className = {s.list}>\r\n            {contacts.map(contact => {\r\n                return(\r\n                    <li key = {contact.id} id = {contact.id} className = {s.item}>\r\n                        <p>{contact.name}: {contact.number}</p>\r\n                        <button onClick={() => dispatch(actions.delContact(contact.id))} className = {s.button}>Delete</button>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array,\r\n}","import ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    )\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport actions from './phonebook-actions'\r\n\r\nconst initialState = [\r\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ]\r\n\r\nconst itemsReducer = createReducer(initialState, {\r\n    [actions.addContact]: (state, action) => {\r\n        if (state.some(contact => {\r\n            return contact.name.toLowerCase() === action.payload.name.toLowerCase()\r\n            })){\r\n                alert(`${action.payload.name} is already in cotacts`)\r\n                return state\r\n            }\r\n        return [...state, action.payload]\r\n    },\r\n    [actions.delContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n})\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.filterContacts]: (state, action) => action.payload,\r\n})\r\n\r\n\r\nexport {itemsReducer, filterReducer}\r\n// const rootReduser = combineReducers({\r\n//     items: itemsReducer,\r\n//     filter: filterReduser,\r\n// })\r\n\r\n\r\n// export default rootReduser\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {itemsReducer, filterReducer} from \"./phonebook/phonebook-reducers\"\r\n\r\n\r\n\r\nconst phonebookPersistConfig = {\r\n    key: 'phonebook',\r\n    storage,\r\n    blacklist: ['filter'],\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n})\r\n\r\nconst persReducer = persistReducer(phonebookPersistConfig, rootReducer)\r\n\r\nconst store = configureStore({\r\n    reducer: persReducer,\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport {store, persistor}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {store, persistor} from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor = {persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1RYPo\",\"input\":\"ContactForm_input__1Jmut\",\"button\":\"ContactForm_button__2qf1c\"};"],"sourceRoot":""}